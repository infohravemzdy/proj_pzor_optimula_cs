using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoFixture;
using FluentAssertions;
using NSubstitute;
using Xunit;
using Xunit.Abstractions;
using HraveMzdy.Legalios.Service;
using HraveMzdy.Legalios.Service.Types;
using HraveMzdy.Legalios.Service.Interfaces;
using HraveMzdy.Procezor.Service;
using HraveMzdy.Procezor.Optimula.Registry.Constants;
using HraveMzdy.Procezor.Optimula.Service;
using HraveMzdy.Procezor.Service.Interfaces;
using HraveMzdy.Procezor.Optimula.Registry.Providers;
using Procezor.OptimulaTest.Examples;
using System.IO;

namespace Procezor.OptimulaTest.Service
{
    [CollectionDefinition("Non-Parallel", DisableParallelization = true)]
    public class NonParallelCollectionDefinitionClass
    {
    }

    [Collection("Non-Parallel")]
    public class ServiceTestPamicaExampleTemplate
    {
#if __MACOS__
        public const string PROTOKOL_TEST_FOLDER = "../../../test_import";
#else
        public const string PROTOKOL_TEST_FOLDER = "..\\..\\..\\test_import";
#endif
        public const string PROTOKOL_FOLDER_NAME = "test_import";
        public const string PARENT_PROTOKOL_FOLDER_NAME = "Procezor.OptimulaTest";

        protected const string TestFolder = PROTOKOL_TEST_FOLDER;

        protected readonly ITestOutputHelper output;

        protected readonly IServiceProcezor _sut;
        protected readonly IServiceLegalios _leg;

        protected static readonly OptimulaGenerator[] _genBaseTests = new OptimulaGenerator[] {
            OptimulaPamicaGenerator.Spec(1, "FullTime_OverTimeZeroHolidaysZero", "101").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(168*60).WithOverSheetHrsVal(0).WithHoliSheetHrsVal(0).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
            OptimulaPamicaGenerator.Spec(102, "FullTime_OverTimeHs16HolidaysZero", "102").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(168*60).WithOverSheetHrsVal(16*60).WithHoliSheetHrsVal(0).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
            OptimulaPamicaGenerator.Spec(103, "FullTime_OverTimeZeroHolidaysHs16", "103").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(168*60).WithOverSheetHrsVal(0).WithHoliSheetHrsVal(16*60).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
            OptimulaPamicaGenerator.Spec(104, "FullTime_OverTimeHs16HolidaysHs16", "104").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(168*60).WithOverSheetHrsVal(16*60).WithHoliSheetHrsVal(16*60).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
            OptimulaPamicaGenerator.Spec(111, "WorkTime_OverTimeZeroHolidaysZero", "111").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(160*60).WithOverSheetHrsVal(0).WithHoliSheetHrsVal(0).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
            OptimulaPamicaGenerator.Spec(112, "WorkTime_OverTimeHs16HolidaysZero", "112").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(160*60).WithOverSheetHrsVal(16*60).WithHoliSheetHrsVal(0).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
            OptimulaPamicaGenerator.Spec(113, "WorkTime_OverTimeZeroHolidaysHs16", "113").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(160*60).WithOverSheetHrsVal(0).WithHoliSheetHrsVal(16*60).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
            OptimulaPamicaGenerator.Spec(114, "WorkTime_OverTimeHs16HolidaysHs16", "114").WithFullSheetHrsVal(168*60).WithTimeSheetHrsVal(168*60).WithWorkSheetHrsVal(160*60).WithOverSheetHrsVal(16*60).WithHoliSheetHrsVal(16*60).WithMSalaryAwardVal(570000).WithHomeOffTarifVal(11000).WithHomeOffHoursVal(40*60).WithClothesHoursVal(10600).WithAgrWorkRatioVal(14).WithAgrWorkTarifVal(10000),
        };

        protected static readonly OptimulaGenerator[] _genTests = new OptimulaGenerator[] {
            OptimulaPamicaGenerator.ParseSpec(1, "1041;OptEps TestCase1041;202104;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;7 400,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;166,67;"),
            OptimulaPamicaGenerator.ParseSpec(126, "126;OptEps TestCase126;202104;120,00;0,30;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;1 000,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 399,00;0,00;14 220,00;681,67;"),
            OptimulaPamicaGenerator.ParseSpec(1329, "1329;OptEps TestCase1329;202104;100,00;0,20;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;7,50;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;1 927,00;0,00;3 450,00;300,83;"),
            OptimulaPamicaGenerator.ParseSpec(1467, "1467;OptEps TestCase1467;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;135,00;18,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 111,00;0,00;0,00;784,17;"),
            OptimulaPamicaGenerator.ParseSpec(18, "18;OptEps TestCase18;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;30,00;4,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(1833, "1833;OptEps TestCase1833;202104;100,00;0,13;0,00;0,00;11,17;0,00;127,00;25,00;0,00;40,00;1 000,00;0,00;0,00;165,00;165,00;0,00;105,00;14,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 692,00;8 333,00;4 300,00;712,50;"),
            OptimulaPamicaGenerator.ParseSpec(222, "222;OptEps TestCase222;202104;120,00;0,25;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;500,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;7,50;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 111,00;0,00;13 740,00;774,17;"),
            OptimulaPamicaGenerator.ParseSpec(233, "233;OptEps TestCase233;202104;90,00;0,13;0,00;0,00;11,17;0,00;119,00;15,00;0,00;45,00;0,00;0,00;0,00;165,00;165,00;0,00;60,00;8,00;32,00;0,00;7,50;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 807,00;2 823,00;2 835,00;560,00;"),
            OptimulaPamicaGenerator.ParseSpec(242, "242;OptEps TestCase242;202104;100,00;0,13;0,00;0,00;11,17;0,00;127,00;15,00;0,00;35,00;1 000,00;0,00;0,00;165,00;165,00;0,00;105,00;14,00;0,00;0,00;7,50;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 167,00;5 501,00;5 450,00;795,83;"),
            OptimulaPamicaGenerator.ParseSpec(244, "244;OptEps TestCase244;202104;110,00;0,13;0,00;0,00;11,80;0,00;97,00;26,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 947,00;7 446,00;6 930,00;840,00;"),
            OptimulaPamicaGenerator.ParseSpec(2462, "2462;OptEps TestCase2462;202104;100,00;0,16;0,00;0,00;11,17;0,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 609,00;0,00;6 600,00;705,00;"),
            OptimulaPamicaGenerator.ParseSpec(249, "249;OptEps TestCase249;202104;100,00;0,13;0,00;0,00;11,80;0,00;154,00;32,00;14 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 947,00;14 549,00;6 300,00;840,00;"),
            OptimulaPamicaGenerator.ParseSpec(2494, "2494;OptEps TestCase2494;202104;100,00;0,20;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;133,00;18,00;8,00;0,00;17,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 189,00;0,00;7 500,00;673,33;"),
            OptimulaPamicaGenerator.ParseSpec(251, "251;OptEps TestCase251;202104;100,00;0,13;0,00;0,00;11,17;0,00;127,00;15,00;0,00;35,00;1 000,00;0,00;0,00;165,00;165,00;0,00;67,50;9,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 106,00;4 382,00;4 300,00;644,17;"),
            OptimulaPamicaGenerator.ParseSpec(2518, "2518;OptEps TestCase2518;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;1 000,00;0,00;0,00;165,00;165,00;0,00;127,50;17,00;0,00;0,00;3,75;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 775,00;0,00;0,00;762,50;"),
            OptimulaPamicaGenerator.ParseSpec(252, "252;OptEps TestCase252;202104;0,00;0,00;0,00;0,00;11,17;0,00;134,00;5,00;0,00;25,00;0,00;0,00;0,00;170,50;170,50;0,00;69,75;9,00;0,00;0,00;7,75;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;779,00;287,00;0,00;120,83;"),
            OptimulaPamicaGenerator.ParseSpec(2549, "2549;OptEps TestCase2549;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;1 000,00;0,00;0,00;165,00;165,00;0,00;127,50;17,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 937,00;0,00;0,00;600,00;"),
            OptimulaPamicaGenerator.ParseSpec(256, "256;OptEps TestCase256;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;6,00;0,00;7,50;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 943,00;0,00;0,00;747,50;"),
            OptimulaPamicaGenerator.ParseSpec(2584, "2584;OptEps TestCase2584;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;135,00;18,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 195,00;0,00;0,00;525,00;"),
            OptimulaPamicaGenerator.ParseSpec(265, "265;OptEps TestCase265;202104;110,00;0,13;0,00;0,00;11,80;0,00;112,00;32,00;12 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 390,00;7 998,00;5 115,00;620,00;"),
            OptimulaPamicaGenerator.ParseSpec(268, "268;OptEps TestCase268;202104;120,00;0,15;0,00;0,00;11,17;0,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;6,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;8 520,00;813,33;"),
            OptimulaPamicaGenerator.ParseSpec(2707, "2707;OptEps TestCase2707;202104;120,00;0,25;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;500,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 195,00;0,00;13 620,00;784,17;"),
            OptimulaPamicaGenerator.ParseSpec(271, "271;OptEps TestCase271;202104;100,00;0,20;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;170,50;170,50;0,00;155,00;20,00;2,50;0,00;0,00;15,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 367,00;0,00;9 600,00;812,50;"),
            OptimulaPamicaGenerator.ParseSpec(2824, "2824;OptEps TestCase2824;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;82,50;11,00;5,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 184,00;0,00;0,00;486,67;"),
            OptimulaPamicaGenerator.ParseSpec(2892, "2892;OptEps TestCase2892;202104;90,00;0,13;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;45,00;6,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 268,00;0,00;3 285,00;487,50;"),
            OptimulaPamicaGenerator.ParseSpec(2938, "2938;OptEps TestCase2938;202104;100,00;0,13;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;2 000,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;22,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 943,00;0,00;5 550,00;771,67;"),
            OptimulaPamicaGenerator.ParseSpec(2943, "2943;OptEps TestCase2943;202104;100,00;0,13;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;123,75;16,50;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 729,00;0,00;4 200,00;569,17;"),
            OptimulaPamicaGenerator.ParseSpec(30, "30;OptEps TestCase30;202104;90,00;0,25;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;4 700,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;0,00;7,50;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 938,00;0,00;7 965,00;600,00;"),
            OptimulaPamicaGenerator.ParseSpec(3102, "3102;OptEps TestCase3102;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;75,00;10,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 430,00;0,00;0,00;362,50;"),
            OptimulaPamicaGenerator.ParseSpec(3108, "3108;OptEps TestCase3108;202104;0,00;0,00;0,00;0,00;11,17;0,00;112,00;0,00;0,00;12,00;0,00;0,00;0,00;165,00;165,00;0,00;116,75;15,50;0,25;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 111,00;10 269,00;4 850,00;799,17;"),
            OptimulaPamicaGenerator.ParseSpec(321, "321;OptEps TestCase321;202104;0,00;0,00;0,00;0,00;11,17;0,00;149,00;15,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 195,00;6 502,00;0,00;775,00;"),
            OptimulaPamicaGenerator.ParseSpec(3234, "3234;OptEps TestCase3234;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;37,50;5,00;6,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 027,00;0,00;0,00;805,83;"),
            OptimulaPamicaGenerator.ParseSpec(3256, "3256;OptEps TestCase3256;202104;100,00;0,13;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;5 950,00;787,50;"),
            OptimulaPamicaGenerator.ParseSpec(3263, "3263;OptEps TestCase3263;202104;0,00;0,00;0,00;0,00;11,17;0,00;126,00;8,00;0,00;40,00;500,00;0,00;0,00;170,50;170,50;0,00;147,25;19,00;1,50;0,00;0,00;15,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 935,00;2 681,00;0,00;737,92;"),
            OptimulaPamicaGenerator.ParseSpec(3375, "3375;OptEps TestCase3375;202104;100,00;0,30;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;13,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;13 550,00;840,83;"),
            OptimulaPamicaGenerator.ParseSpec(3415, "3415;OptEps TestCase3415;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;101,50;14,00;5,50;0,00;3,50;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 195,00;0,00;0,00;781,67;"),
            OptimulaPamicaGenerator.ParseSpec(3425, "3425;OptEps TestCase3425;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;2 000,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 268,00;0,00;0,00;487,50;"),
            OptimulaPamicaGenerator.ParseSpec(3429, "3429;OptEps TestCase3429;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 859,00;0,00;0,00;725,00;"),
            OptimulaPamicaGenerator.ParseSpec(3473, "3473;OptEps TestCase3473;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;500,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;13,50;0,00;7,50;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 111,00;0,00;0,00;790,00;"),
            OptimulaPamicaGenerator.ParseSpec(3512, "3512;OptEps TestCase3512;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;3,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 064,00;0,00;0,00;675,83;"),
            OptimulaPamicaGenerator.ParseSpec(3519, "3519;OptEps TestCase3519;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;127,50;17,00;6,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 111,00;0,00;0,00;765,83;"),
            OptimulaPamicaGenerator.ParseSpec(3565, "3565;OptEps TestCase3565;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;2 000,00;0,00;0,00;165,00;165,00;0,00;146,00;19,50;15,00;0,00;4,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 725,00;0,00;0,00;717,50;"),
            OptimulaPamicaGenerator.ParseSpec(3586, "3586;OptEps TestCase3586;202104;0,00;0,00;0,00;0,00;11,80;0,00;104,00;20,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 428,00;5 618,00;0,00;766,67;"),
            OptimulaPamicaGenerator.ParseSpec(3594, "3594;OptEps TestCase3594;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;170,50;170,50;0,00;155,00;20,00;1,25;0,00;0,00;15,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 803,00;0,00;0,00;716,67;"),
            OptimulaPamicaGenerator.ParseSpec(360, "360;OptEps TestCase360;202104;130,00;0,13;0,00;0,00;7,71;0,00;106,00;40,00;11 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 887,00;12 518,00;8 190,00;840,00;"),
            OptimulaPamicaGenerator.ParseSpec(3637, "3637;OptEps TestCase3637;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;26,25;3,50;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 315,00;0,00;0,00;657,08;"),
            OptimulaPamicaGenerator.ParseSpec(368, "368;OptEps TestCase368;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;6,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;0,00;790,00;"),
            OptimulaPamicaGenerator.ParseSpec(3686, "3686;OptEps TestCase3686;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;120,00;16,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 776,00;0,00;0,00;721,67;"),
            OptimulaPamicaGenerator.ParseSpec(3700, "3700;OptEps TestCase3700;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 943,00;0,00;0,00;737,50;"),
            OptimulaPamicaGenerator.ParseSpec(3706, "3706;OptEps TestCase3706;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;1,50;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 650,00;0,00;0,00;732,08;"),
            OptimulaPamicaGenerator.ParseSpec(3708, "3708;OptEps TestCase3708;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;7,50;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 771,00;0,00;0,00;575,00;"),
            OptimulaPamicaGenerator.ParseSpec(3720, "3720;OptEps TestCase3720;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;500,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;1,50;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;0,00;815,83;"),
            OptimulaPamicaGenerator.ParseSpec(3722, "3722;OptEps TestCase3722;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;11,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;0,00;821,67;"),
            OptimulaPamicaGenerator.ParseSpec(3726, "3726;OptEps TestCase3726;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;500,00;0,00;0,00;143,00;143,00;0,00;136,50;21,00;0,00;0,00;0,00;6,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 529,00;0,00;0,00;675,83;"),
            OptimulaPamicaGenerator.ParseSpec(3783, "3783;OptEps TestCase3783;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;12,50;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 943,00;0,00;0,00;768,33;"),
            OptimulaPamicaGenerator.ParseSpec(3795, "3795;OptEps TestCase3795;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;132,00;132,00;0,00;132,00;22,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 199,00;0,00;0,00;626,67;"),
            OptimulaPamicaGenerator.ParseSpec(38, "38;OptEps TestCase38;202104;90,00;0,13;0,00;0,00;11,17;0,00;119,00;15,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;7,50;1,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 817,00;4 815,00;4 860,00;780,83;"),
            OptimulaPamicaGenerator.ParseSpec(3812, "3812;OptEps TestCase3812;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;131,25;17,50;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 195,00;0,00;0,00;825,00;"),
            OptimulaPamicaGenerator.ParseSpec(3818, "3818;OptEps TestCase3818;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;116,25;15,50;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 398,00;0,00;0,00;668,75;"),
            OptimulaPamicaGenerator.ParseSpec(3829, "3829;OptEps TestCase3829;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;3,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 692,00;0,00;0,00;714,17;"),
            OptimulaPamicaGenerator.ParseSpec(3830, "3830;OptEps TestCase3830;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;3,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 692,00;0,00;0,00;719,17;"),
            OptimulaPamicaGenerator.ParseSpec(3841, "3841;OptEps TestCase3841;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;155,00;21,00;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;0,00;800,83;"),
            OptimulaPamicaGenerator.ParseSpec(3855, "3855;OptEps TestCase3855;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;1 000,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;7,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 854,00;0,00;0,00;605,00;"),
            OptimulaPamicaGenerator.ParseSpec(3870, "3870;OptEps TestCase3870;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;1 200,00;0,00;0,00;165,00;165,00;0,00;112,50;15,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 435,00;0,00;0,00;513,33;"),
            OptimulaPamicaGenerator.ParseSpec(3871, "3871;OptEps TestCase3871;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;120,00;16,00;6,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 189,00;0,00;0,00;650,00;"),
            OptimulaPamicaGenerator.ParseSpec(3873, "3873;OptEps TestCase3873;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;500,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;11,50;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;0,00;822,50;"),
            OptimulaPamicaGenerator.ParseSpec(3879, "3879;OptEps TestCase3879;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;500,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 027,00;0,00;0,00;750,00;"),
            OptimulaPamicaGenerator.ParseSpec(3880, "3880;OptEps TestCase3880;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;137,00;18,50;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 195,00;0,00;0,00;775,00;"),
            OptimulaPamicaGenerator.ParseSpec(3890, "3890;OptEps TestCase3890;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;127,50;17,00;1,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 324,00;0,00;0,00;219,17;"),
            OptimulaPamicaGenerator.ParseSpec(3892, "3892;OptEps TestCase3892;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;1 000,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;0,00;7,50;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 870,00;0,00;0,00;726,67;"),
            OptimulaPamicaGenerator.ParseSpec(3894, "3894;OptEps TestCase3894;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;132,00;18,00;19,50;0,00;3,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 061,00;0,00;0,00;486,67;"),
            OptimulaPamicaGenerator.ParseSpec(3902, "3902;OptEps TestCase3902;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;120,00;16,00;6,00;0,00;11,25;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 274,00;0,00;0,00;638,33;"),
            OptimulaPamicaGenerator.ParseSpec(3903, "3903;OptEps TestCase3903;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;95,00;13,00;0,00;0,00;6,25;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 351,00;0,00;0,00;525,83;"),
            OptimulaPamicaGenerator.ParseSpec(3962, "3962;OptEps TestCase3962;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;112,50;15,00;0,00;0,00;7,50;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 603,00;0,00;0,00;405,00;"),
            OptimulaPamicaGenerator.ParseSpec(3991, "3991;OptEps TestCase3991;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;3,50;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 027,00;0,00;0,00;762,50;"),
            OptimulaPamicaGenerator.ParseSpec(4015, "4015;OptEps TestCase4015;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;1 500,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;10,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 613,00;0,00;0,00;436,67;"),
            OptimulaPamicaGenerator.ParseSpec(4076, "4076;OptEps TestCase4076;202104;0,00;0,00;0,00;0,00;7,71;0,00;106,00;32,00;5 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 763,00;9 697,00;0,00;813,33;"),
            OptimulaPamicaGenerator.ParseSpec(4114, "4114;OptEps TestCase4114;202104;0,00;0,00;0,00;0,00;11,17;0,00;119,00;15,00;0,00;40,00;1 500,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;8,50;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 195,00;5 185,00;0,00;855,00;"),
            OptimulaPamicaGenerator.ParseSpec(412, "412;OptEps TestCase412;202104;100,00;0,13;0,00;0,00;11,17;0,00;127,00;11,00;0,00;40,00;1 000,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;7,50;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;4 124,00;5 950,00;862,50;"),
            OptimulaPamicaGenerator.ParseSpec(4145, "4145;OptEps TestCase4145;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 704,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(4173, "4173;OptEps TestCase4173;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;154,50;21,00;0,00;0,00;7,50;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 798,00;0,00;0,00;312,50;"),
            OptimulaPamicaGenerator.ParseSpec(4183, "4183;OptEps TestCase4183;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;165,00;165,00;0,00;152,25;20,50;1,25;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 267,00;0,00;0,00;218,33;"),
            OptimulaPamicaGenerator.ParseSpec(4190, "4190;OptEps TestCase4190;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 022,00;0,00;0,00;487,50;"),
            OptimulaPamicaGenerator.ParseSpec(4206, "4206;OptEps TestCase4206;202104;0,00;0,00;0,00;0,00;11,80;0,00;0,00;0,00;5 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 454,00;0,00;0,00;346,67;"),
            OptimulaPamicaGenerator.ParseSpec(4244, "4244;OptEps TestCase4244;202104;0,00;0,00;0,00;0,00;7,71;0,00;0,00;0,00;2 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;306,67;"),
            OptimulaPamicaGenerator.ParseSpec(441, "441;OptEps TestCase441;202104;0,00;0,00;0,00;0,00;11,17;0,00;134,00;5,00;0,00;25,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;24,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 432,00;1 650,00;0,00;730,00;"),
            OptimulaPamicaGenerator.ParseSpec(443, "443;OptEps TestCase443;202104;100,00;0,30;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;14 200,00;799,17;"),
            OptimulaPamicaGenerator.ParseSpec(446, "446;OptEps TestCase446;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;170,50;170,50;0,00;38,75;5,00;0,00;0,00;0,00;15,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 107,00;0,00;0,00;767,50;"),
            OptimulaPamicaGenerator.ParseSpec(46, "46;OptEps TestCase46;202104;0,00;0,00;0,00;0,00;11,17;0,00;119,00;10,00;0,00;30,00;1 000,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;15,25;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 153,00;3 435,00;0,00;831,25;"),
            OptimulaPamicaGenerator.ParseSpec(507, "507;OptEps TestCase507;202104;100,00;0,30;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;2,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 172,00;0,00;13 500,00;850,83;"),
            OptimulaPamicaGenerator.ParseSpec(519, "519;OptEps TestCase519;202104;100,00;0,13;0,00;0,00;7,71;0,00;106,00;20,00;5 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 825,00;6 158,00;4 450,00;826,67;"),
            OptimulaPamicaGenerator.ParseSpec(557, "557;OptEps TestCase557;202104;100,00;0,15;0,00;0,00;11,17;0,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;165,00;165,00;0,00;101,25;13,50;3,25;0,00;3,75;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 525,00;0,00;5 550,00;686,67;"),
            OptimulaPamicaGenerator.ParseSpec(560, "560;OptEps TestCase560;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;25,00;2 000,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 860,00;0,00;0,00;725,00;"),
            OptimulaPamicaGenerator.ParseSpec(561, "561;OptEps TestCase561;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;138,75;18,50;2,75;0,00;11,25;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 938,00;0,00;0,00;649,17;"),
            OptimulaPamicaGenerator.ParseSpec(563, "563;OptEps TestCase563;202104;100,00;0,13;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;1,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 069,00;0,00;5 700,00;812,50;"),
            OptimulaPamicaGenerator.ParseSpec(564, "564;OptEps TestCase564;202104;100,00;0,25;0,00;0,00;11,17;0,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;10,50;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 189,00;0,00;9 350,00;735,83;"),
            OptimulaPamicaGenerator.ParseSpec(566, "566;OptEps TestCase566;202104;110,00;0,13;0,00;0,00;11,80;0,00;136,00;32,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 758,00;12 471,00;6 710,00;813,33;"),
            OptimulaPamicaGenerator.ParseSpec(568, "568;OptEps TestCase568;202104;110,00;0,13;0,00;0,00;11,80;0,00;106,00;32,00;9 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 853,00;9 867,00;6 820,00;826,67;"),
            OptimulaPamicaGenerator.ParseSpec(583, "583;OptEps TestCase583;202104;110,00;0,13;0,00;0,00;11,80;0,00;112,00;32,00;9 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 947,00;10 581,00;6 930,00;840,00;"),
            OptimulaPamicaGenerator.ParseSpec(661, "661;OptEps TestCase661;202104;0,00;0,00;0,00;0,00;11,17;0,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;131,25;17,50;4,50;0,00;18,75;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 357,00;0,00;0,00;722,50;"),
            OptimulaPamicaGenerator.ParseSpec(815, "815;OptEps TestCase815;202104;90,00;0,13;0,00;0,00;11,17;0,00;149,00;18,00;0,00;45,00;1 500,00;0,00;0,00;165,00;165,00;0,00;138,75;18,50;0,75;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 876,00;7 306,00;4 905,00;794,17;"),
            OptimulaPamicaGenerator.ParseSpec(817, "817;OptEps TestCase817;202104;120,00;0,26;0,00;0,00;11,17;0,00;0,00;0,00;0,00;45,00;300,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;1,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 279,00;0,00;14 760,00;807,50;"),
            OptimulaPamicaGenerator.ParseSpec(827, "827;OptEps TestCase827;202104;90,00;0,25;0,00;0,00;11,17;0,00;0,00;0,00;0,00;35,00;4 700,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;0,00;0,00;0,00;15,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 111,00;0,00;10 305,00;762,50;"),
            OptimulaPamicaGenerator.ParseSpec(909, "909;OptEps TestCase909;202104;130,00;0,13;0,00;0,00;7,71;0,00;106,00;40,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 887,00;12 518,00;8 190,00;840,00;"),
            OptimulaPamicaGenerator.ParseSpec(912, "912;OptEps TestCase912;202104;110,00;0,13;0,00;0,00;11,80;0,00;97,00;32,00;14 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 758,00;8 894,00;6 710,00;813,33;"),
            OptimulaPamicaGenerator.ParseSpec(939, "939;OptEps TestCase939;202104;290,00;0,13;0,00;0,00;7,71;0,00;106,00;32,00;12 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;0,00;0,00;16,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 887,00;10 014,00;18 270,00;840,00;"),
        };

        protected static readonly OptimulaGenerator[] _genScmHoursTests = new OptimulaGenerator[] {
            OptimulaPamicaGenerator.ParseSpec(1, "10;OptTestHour TestCase10;202201;130,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;23,00;0,00;0,00;0,00;253,00;253,00;0,00;138,00;12,00;3,75;46,00;0,00;0,00;;3,75;0,25;0,00;0,00;0,00;0,00;103,50;0,10;0,00;0,00;4 000,00;0,00;6 155,00;812,08;"),
            OptimulaPamicaGenerator.ParseSpec(111, "111;OptTestHour TestCase111;202201;170,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;253,00;253,00;0,00;57,50;5,00;1,50;115,00;0,00;0,00;;1,50;0,25;0,00;0,00;0,00;0,00;46,50;0,10;0,00;0,00;2 800,00;0,00;7 945,00;553,33;"),
            OptimulaPamicaGenerator.ParseSpec(113, "113;OptTestHour TestCase113;202201;0,00;0,00;0,00;0,00;0,00;100,00;0,00;0,00;0,00;16,00;0,00;0,00;0,00;253,00;253,00;0,00;46,00;4,00;0,00;126,50;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;30,00;0,10;0,00;0,00;3 650,00;0,00;0,00;487,92;"),
            OptimulaPamicaGenerator.ParseSpec(117, "117;OptTestHour TestCase117;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;253,00;253,00;0,00;126,50;11,00;2,50;57,50;0,00;0,00;;2,50;0,25;0,00;0,00;0,00;0,00;53,75;0,10;0,00;0,00;3 400,00;0,00;7 775,00;737,92;"),
            OptimulaPamicaGenerator.ParseSpec(124, "124;OptTestHour TestCase124;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;12,50;7,50;0,00;0,00;;12,50;0,25;0,00;0,00;0,00;0,00;25,50;0,10;0,00;0,00;5 600,00;0,00;2 800,00;739,58;"),
            OptimulaPamicaGenerator.ParseSpec(126, "126;OptTestHour TestCase126;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;25,25;16,00;0,00;0,00;;25,25;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;6 100,00;0,00;8 540,00;925,83;"),
            OptimulaPamicaGenerator.ParseSpec(128, "128;OptTestHour TestCase128;202201;270,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;176,00;176,00;0,00;72,00;9,00;4,25;104,00;0,00;0,00;;4,25;0,25;0,00;0,00;0,00;0,00;3,00;0,10;0,00;0,00;2 350,00;0,00;1 974,00;342,08;"),
            OptimulaPamicaGenerator.ParseSpec(14, "14;OptTestHour TestCase14;202201;170,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;253,00;253,00;0,00;178,25;15,50;9,50;5,75;0,00;0,00;;9,50;0,25;0,00;0,00;0,00;0,00;117,75;0,10;0,00;0,00;2 700,00;0,00;4 789,00;582,92;"),
            OptimulaPamicaGenerator.ParseSpec(141, "141;OptTestHour TestCase141;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;176,00;176,00;0,00;8,00;1,00;2,25;160,00;8,00;0,00;;2,25;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;6 050,00;0,00;27 710,00;1 216,25;"),
            OptimulaPamicaGenerator.ParseSpec(145, "145;OptTestHour TestCase145;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;0,00;7,50;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;2,00;0,10;0,00;0,00;5 150,00;0,00;23 095,00;681,67;"),
            OptimulaPamicaGenerator.ParseSpec(148, "148;OptTestHour TestCase148;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;176,00;176,00;0,00;120,00;15,00;23,25;56,00;0,00;0,00;;23,25;0,25;0,00;0,00;0,00;0,00;9,50;0,10;0,00;0,00;2 784,00;0,00;14 176,00;982,92;"),
            OptimulaPamicaGenerator.ParseSpec(156, "156;OptTestHour TestCase156;202201;160,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;120,00;16,00;8,75;45,00;0,00;0,00;;8,75;0,25;0,00;0,00;0,00;0,00;35,25;0,10;0,00;0,00;4 650,00;0,00;19 763,00;703,33;"),
            OptimulaPamicaGenerator.ParseSpec(161, "161;OptTestHour TestCase161;202201;130,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;146,25;19,50;16,50;18,75;0,00;0,00;;16,50;0,25;0,00;0,00;0,00;0,00;11,75;0,10;0,00;0,00;5 950,00;0,00;25 288,00;779,58;"),
            OptimulaPamicaGenerator.ParseSpec(173, "173;OptTestHour TestCase173;202201;100,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;18,00;0,00;0,00;0,00;176,00;176,00;0,00;112,00;14,00;0,00;64,00;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;5 900,00;0,00;2 596,00;788,33;"),
            OptimulaPamicaGenerator.ParseSpec(183, "183;OptTestHour TestCase183;202201;91,00;0,14;0,00;0,00;0,00;106,00;0,00;0,00;0,00;19,00;0,00;0,00;0,00;176,00;176,00;0,00;84,00;10,50;9,00;52,00;0,00;0,00;;9,00;0,25;0,00;0,00;0,00;0,00;3,00;0,10;0,00;0,00;6 201,00;0,00;2 691,00;870,83;"),
            OptimulaPamicaGenerator.ParseSpec(184, "184;OptTestHour TestCase184;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;14,50;0,00;0,00;0,00;;14,50;0,25;0,00;0,00;0,00;0,00;7,50;0,10;0,00;0,00;5 800,00;0,00;5 076,00;803,75;"),
            OptimulaPamicaGenerator.ParseSpec(185, "185;OptTestHour TestCase185;202201;140,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;101,25;13,50;0,00;63,75;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;4 050,00;0,00;18 455,00;631,25;"),
            OptimulaPamicaGenerator.ParseSpec(19, "19;OptTestHour TestCase19;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;27,00;0,00;0,00;0,00;253,00;253,00;0,00;149,50;13,00;5,25;23,00;0,00;0,00;;5,25;0,25;0,00;0,00;0,00;0,00;112,50;0,10;0,00;0,00;5 900,00;0,00;6 008,00;855,00;"),
            OptimulaPamicaGenerator.ParseSpec(196, "196;OptTestHour TestCase196;202201;100,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;176,00;176,00;0,00;104,00;13,00;1,25;72,00;0,00;0,00;;1,25;0,25;0,00;0,00;0,00;0,00;6,75;0,10;0,00;0,00;4 850,00;0,00;2 134,00;690,42;"),
            OptimulaPamicaGenerator.ParseSpec(200, "200;OptTestHour TestCase200;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;146,25;19,50;34,25;18,75;0,00;0,00;;34,25;0,25;0,00;0,00;0,00;0,00;38,75;0,10;0,00;0,00;6 200,00;0,00;27 750,00;947,92;"),
            OptimulaPamicaGenerator.ParseSpec(201, "201;OptTestHour TestCase201;202201;160,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;67,50;9,00;8,25;22,50;0,00;0,00;;8,25;0,25;0,00;0,00;0,00;0,00;20,25;0,10;0,00;0,00;6 200,00;0,00;26 350,00;854,17;"),
            OptimulaPamicaGenerator.ParseSpec(218, "218;OptTestHour TestCase218;202201;110,00;0,14;0,00;0,00;0,00;106,00;0,00;0,00;0,00;17,00;0,00;0,00;0,00;176,00;176,00;0,00;104,00;13,00;5,75;72,00;0,00;0,00;;5,75;0,25;0,00;0,00;0,00;0,00;7,25;0,10;0,00;0,00;5 512,00;0,00;1 560,00;732,92;"),
            OptimulaPamicaGenerator.ParseSpec(221, "221;OptTestHour TestCase221;202201;110,00;0,14;0,00;0,00;0,00;106,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;176,00;176,00;0,00;88,00;11,00;5,00;88,00;0,00;0,00;;5,00;0,25;0,00;0,00;0,00;0,00;9,50;0,10;0,00;0,00;6 148,00;0,00;5 452,00;861,25;"),
            OptimulaPamicaGenerator.ParseSpec(223, "223;OptTestHour TestCase223;202201;91,00;0,14;0,00;0,00;0,00;106,00;0,00;0,00;0,00;18,00;0,00;0,00;0,00;176,00;176,00;0,00;128,00;16,00;12,50;48,00;0,00;0,00;;12,50;0,25;0,00;0,00;0,00;0,00;4,75;0,10;0,00;0,00;5 936,00;0,00;2 128,00;830,83;"),
            OptimulaPamicaGenerator.ParseSpec(233, "233;OptTestHour TestCase233;202201;140,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;67,50;9,00;25,25;22,50;0,00;0,00;;25,25;0,25;0,00;0,00;0,00;0,00;22,50;0,10;0,00;0,00;6 200,00;0,00;8 080,00;947,50;"),
            OptimulaPamicaGenerator.ParseSpec(234, "234;OptTestHour TestCase234;202201;130,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;146,25;19,50;5,50;18,75;0,00;0,00;;5,50;0,25;0,00;0,00;0,00;0,00;6,00;0,10;0,00;0,00;5 250,00;0,00;3 864,00;720,42;"),
            OptimulaPamicaGenerator.ParseSpec(237, "237;OptTestHour TestCase237;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;26,00;40,00;0,00;0,00;;26,00;0,25;0,00;0,00;0,00;0,00;8,50;0,10;0,00;0,00;2 928,00;0,00;6 344,00;945,42;"),
            OptimulaPamicaGenerator.ParseSpec(242, "242;OptTestHour TestCase242;202201;91,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;176,00;176,00;0,00;80,00;10,00;10,50;96,00;0,00;0,00;;10,50;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;5 900,00;0,00;5 900,00;812,50;"),
            OptimulaPamicaGenerator.ParseSpec(262, "262;OptTestHour TestCase262;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;120,00;16,00;14,00;45,00;0,00;0,00;;14,00;0,25;0,00;0,00;0,00;0,00;13,50;0,10;0,00;0,00;4 400,00;0,00;20 100,00;626,67;"),
            OptimulaPamicaGenerator.ParseSpec(265, "265;OptTestHour TestCase265;202201;130,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;105,00;14,00;8,25;60,00;0,00;0,00;;8,25;0,25;0,00;0,00;0,00;0,00;31,75;0,10;0,00;0,00;6 100,00;0,00;25 925,00;890,00;"),
            OptimulaPamicaGenerator.ParseSpec(271, "271;OptTestHour TestCase271;202201;91,00;0,00;0,00;0,00;0,00;100,00;0,00;0,00;0,00;18,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(276, "276;OptTestHour TestCase276;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;29,00;0,00;0,00;0,00;165,00;165,00;0,00;82,50;11,00;9,75;67,50;0,00;0,00;;9,75;0,25;0,00;0,00;0,00;0,00;6,00;0,10;0,00;0,00;5 050,00;0,00;5 934,00;703,75;"),
            OptimulaPamicaGenerator.ParseSpec(280, "280;OptTestHour TestCase280;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;23,00;0,00;0,00;0,00;176,00;176,00;0,00;144,00;18,00;27,75;32,00;0,00;0,00;;27,75;0,25;0,00;0,00;0,00;0,00;11,50;0,10;0,00;0,00;5 800,00;0,00;4 872,00;956,38;"),
            OptimulaPamicaGenerator.ParseSpec(284, "284;OptTestHour TestCase284;202201;130,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;105,00;14,00;11,50;60,00;0,00;0,00;;11,50;0,25;0,00;0,00;0,00;0,00;32,75;0,10;0,00;0,00;5 200,00;0,00;22 100,00;814,58;"),
            OptimulaPamicaGenerator.ParseSpec(286, "286;OptTestHour TestCase286;202201;105,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;176,00;176,00;0,00;88,00;11,00;0,50;88,00;0,00;0,00;;0,50;0,25;0,00;0,00;0,00;0,00;9,25;0,10;0,00;0,00;6 300,00;0,00;8 820,00;1 067,50;"),
            OptimulaPamicaGenerator.ParseSpec(288, "288;OptTestHour TestCase288;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;176,00;176,00;0,00;128,00;16,00;4,75;48,00;0,00;0,00;;4,75;0,25;0,00;0,00;0,00;0,00;4,00;0,10;0,00;0,00;5 350,00;0,00;3 210,00;747,92;"),
            OptimulaPamicaGenerator.ParseSpec(291, "291;OptTestHour TestCase291;202201;100,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;18,00;0,00;0,00;0,00;176,00;176,00;0,00;120,00;15,00;1,00;16,00;0,00;0,00;;1,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;5 400,00;0,00;2 367,00;761,67;"),
            OptimulaPamicaGenerator.ParseSpec(303, "303;OptTestHour TestCase303;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;0,00;19,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;18,75;40,00;0,00;0,00;;18,75;0,25;0,00;0,00;0,00;0,00;8,00;0,10;0,00;0,00;2 976,00;0,00;6 448,00;949,17;"),
            OptimulaPamicaGenerator.ParseSpec(308, "308;OptTestHour TestCase308;202201;100,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;253,00;253,00;0,00;138,00;12,00;1,00;34,50;0,00;0,00;;1,00;0,25;0,00;0,00;0,00;0,00;83,75;0,10;0,00;0,00;3 900,00;0,00;4 700,00;768,33;"),
            OptimulaPamicaGenerator.ParseSpec(31, "31;OptTestHour TestCase31;202201;190,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;253,00;253,00;0,00;161,00;14,00;2,00;11,50;0,00;0,00;;2,00;0,25;0,00;0,00;0,00;0,00;106,83;0,10;0,00;0,00;4 150,00;0,00;28 193,00;842,92;"),
            OptimulaPamicaGenerator.ParseSpec(316, "316;OptTestHour TestCase316;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;108,75;14,50;0,00;33,75;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;2,50;0,10;0,00;0,00;5 450,00;0,00;24 405,00;721,25;"),
            OptimulaPamicaGenerator.ParseSpec(318, "318;OptTestHour TestCase318;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;165,00;165,00;0,00;112,50;15,00;0,75;45,00;0,00;0,00;;0,75;0,25;0,00;0,00;0,00;0,00;5,25;0,10;0,00;0,00;6 200,00;0,00;5 425,00;891,25;"),
            OptimulaPamicaGenerator.ParseSpec(324, "324;OptTestHour TestCase324;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;60,00;0,00;0,00;0,00;253,00;253,00;0,00;149,50;13,00;0,75;23,00;0,00;0,00;;0,75;0,25;0,00;0,00;0,00;0,00;110,25;0,10;0,00;0,00;4 400,00;0,00;25 960,00;870,00;"),
            OptimulaPamicaGenerator.ParseSpec(326, "326;OptTestHour TestCase326;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;17,00;0,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;22,50;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;14,50;0,10;0,00;0,00;6 300,00;0,00;1 733,00;846,25;"),
            OptimulaPamicaGenerator.ParseSpec(327, "327;OptTestHour TestCase327;202201;0,00;0,00;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;176,00;176,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(329, "329;OptTestHour TestCase329;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;165,00;165,00;0,00;127,50;17,00;0,00;37,50;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;4 200,00;0,00;3 676,00;550,00;"),
            OptimulaPamicaGenerator.ParseSpec(337, "337;OptTestHour TestCase337;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;150,00;20,00;33,00;15,00;0,00;0,00;;33,00;0,25;0,00;0,00;0,00;0,00;33,75;0,10;0,00;0,00;6 300,00;0,00;12 600,00;842,08;"),
            OptimulaPamicaGenerator.ParseSpec(338, "338;OptTestHour TestCase338;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;42,00;0,00;0,00;0,00;253,00;253,00;0,00;149,50;13,00;0,75;23,00;0,00;0,00;;0,75;0,25;0,00;0,00;0,00;0,00;88,75;0,10;0,00;0,00;4 500,00;0,00;16 545,00;874,17;"),
            OptimulaPamicaGenerator.ParseSpec(339, "339;OptTestHour TestCase339;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;45,00;0,00;0,00;0,00;253,00;253,00;0,00;184,00;16,00;0,50;0,00;0,00;0,00;;0,50;0,25;0,00;0,00;0,00;0,00;98,50;0,10;0,00;0,00;4 400,00;0,00;17 864,00;867,08;"),
            OptimulaPamicaGenerator.ParseSpec(341, "341;OptTestHour TestCase341;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;176,00;176,00;0,00;144,00;18,00;14,50;32,00;0,00;0,00;;14,50;0,25;0,00;0,00;0,00;0,00;0,50;0,10;0,00;0,00;6 250,00;0,00;7 150,00;870,83;"),
            OptimulaPamicaGenerator.ParseSpec(345, "345;OptTestHour TestCase345;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;8,75;16,00;0,00;0,00;;8,75;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;6 150,00;0,00;6 150,00;855,42;"),
            OptimulaPamicaGenerator.ParseSpec(347, "347;OptTestHour TestCase347;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;3,00;40,00;0,00;0,00;;3,00;0,25;0,00;0,00;0,00;0,00;9,75;0,10;0,00;0,00;6 150,00;0,00;3 690,00;858,33;"),
            OptimulaPamicaGenerator.ParseSpec(352, "352;OptTestHour TestCase352;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;120,00;16,00;8,75;37,50;7,50;0,00;;8,75;0,25;0,00;0,00;0,00;0,00;6,00;0,10;0,00;0,00;5 600,00;0,00;5 500,00;777,92;"),
            OptimulaPamicaGenerator.ParseSpec(353, "353;OptTestHour TestCase353;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;176,00;176,00;0,00;80,00;10,00;6,75;96,00;0,00;0,00;;6,75;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;6 100,00;0,00;3 660,00;860,00;"),
            OptimulaPamicaGenerator.ParseSpec(355, "355;OptTestHour TestCase355;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;60,00;0,00;0,00;0,00;165,00;165,00;0,00;75,00;10,00;12,75;90,00;0,00;0,00;;12,75;0,25;0,00;0,00;0,00;0,00;11,75;0,10;0,00;0,00;6 300,00;0,00;19 950,00;992,08;"),
            OptimulaPamicaGenerator.ParseSpec(356, "356;OptTestHour TestCase356;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;127,50;17,00;11,25;37,50;0,00;0,00;;11,25;0,25;0,00;0,00;0,00;0,00;19,25;0,10;0,00;0,00;6 000,00;0,00;4 425,00;862,50;"),
            OptimulaPamicaGenerator.ParseSpec(363, "363;OptTestHour TestCase363;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;39,00;0,00;0,00;0,00;176,00;176,00;0,00;96,00;12,00;1,75;80,00;0,00;0,00;;1,75;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;5 800,00;0,00;11 432,00;808,33;"),
            OptimulaPamicaGenerator.ParseSpec(364, "364;OptTestHour TestCase364;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;176,00;176,00;0,00;8,00;1,00;0,75;0,00;0,00;0,00;;0,75;0,25;0,00;0,00;0,00;0,00;1,25;0,10;0,00;0,00;3 800,00;0,00;1 320,00;623,75;"),
            OptimulaPamicaGenerator.ParseSpec(367, "367;OptTestHour TestCase367;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;11,25;0,00;0,00;0,00;;11,25;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;6 200,00;0,00;3 720,00;905,42;"),
            OptimulaPamicaGenerator.ParseSpec(372, "372;OptTestHour TestCase372;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;165,00;165,00;0,00;135,00;18,00;0,00;30,00;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;6 050,00;0,00;3 025,00;758,75;"),
            OptimulaPamicaGenerator.ParseSpec(374, "374;OptTestHour TestCase374;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;176,00;176,00;0,00;144,00;18,00;21,50;24,00;8,00;0,00;;21,50;0,25;0,00;0,00;0,00;0,00;33,25;0,10;0,00;0,00;4 760,00;0,00;0,00;770,00;"),
            OptimulaPamicaGenerator.ParseSpec(378, "378;OptTestHour TestCase378;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;176,00;176,00;0,00;168,00;21,00;1,00;0,00;0,00;0,00;;1,00;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 800,00;0,00;960,00;644,17;"),
            OptimulaPamicaGenerator.ParseSpec(379, "379;OptTestHour TestCase379;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;47,00;6,50;0,00;30,00;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;1,75;0,10;0,00;0,00;3 750,00;0,00;5 085,00;539,17;"),
            OptimulaPamicaGenerator.ParseSpec(383, "383;OptTestHour TestCase383;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;176,00;176,00;0,00;168,00;21,00;3,75;8,00;0,00;0,00;;3,75;0,25;0,00;0,00;0,00;0,00;2,50;0,10;0,00;0,00;4 300,00;0,00;860,00;589,58;"),
            OptimulaPamicaGenerator.ParseSpec(386, "386;OptTestHour TestCase386;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;253,00;253,00;0,00;172,50;15,00;0,00;0,00;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;112,75;0,10;0,00;0,00;2 900,00;0,00;5 438,00;557,08;"),
            OptimulaPamicaGenerator.ParseSpec(390, "390;OptTestHour TestCase390;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;0,00;0,00;0,00;30,00;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;3 400,00;0,00;4 250,00;432,50;"),
            OptimulaPamicaGenerator.ParseSpec(391, "391;OptTestHour TestCase391;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;25,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;4,50;0,00;0,00;0,00;;4,50;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;3 800,00;0,00;760,00;519,17;"),
            OptimulaPamicaGenerator.ParseSpec(392, "392;OptTestHour TestCase392;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;127,50;17,00;6,50;33,75;3,75;0,00;;6,50;0,25;0,00;0,00;0,00;0,00;3,50;0,10;0,00;0,00;2 250,00;0,00;3 150,00;307,92;"),
            OptimulaPamicaGenerator.ParseSpec(393, "393;OptTestHour TestCase393;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;253,00;253,00;0,00;161,00;14,00;5,75;11,50;0,00;0,00;;5,75;0,25;0,00;0,00;0,00;0,00;74,00;0,10;0,00;0,00;3 000,00;0,00;3 900,00;577,50;"),
            OptimulaPamicaGenerator.ParseSpec(397, "397;OptTestHour TestCase397;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;60,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;5,50;0,00;0,00;0,00;;5,50;0,25;0,00;0,00;0,00;0,00;45,25;0,10;0,00;0,00;3 100,00;0,00;3 875,00;396,67;"),
            OptimulaPamicaGenerator.ParseSpec(398, "398;OptTestHour TestCase398;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;40,00;0,00;0,00;0,00;165,00;165,00;0,00;15,00;2,00;2,00;7,50;0,00;0,00;;2,00;0,25;0,00;0,00;0,00;0,00;2,00;0,10;0,00;0,00;2 700,00;0,00;3 780,00;375,00;"),
            OptimulaPamicaGenerator.ParseSpec(399, "399;OptTestHour TestCase399;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;6,50;0,00;0,00;0,00;;6,50;0,25;0,00;0,00;0,00;0,00;12,25;0,10;0,00;0,00;2 200,00;0,00;1 320,00;293,33;"),
            OptimulaPamicaGenerator.ParseSpec(404, "404;OptTestHour TestCase404;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;165,00;165,00;0,00;142,50;19,00;0,00;22,50;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;6,00;0,10;0,00;0,00;2 000,00;0,00;1 000,00;267,92;"),
            OptimulaPamicaGenerator.ParseSpec(405, "405;OptTestHour TestCase405;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;10,00;0,00;0,00;0,00;176,00;176,00;0,00;128,00;16,00;5,25;48,00;0,00;0,00;;5,25;0,25;0,00;0,00;0,00;0,00;12,75;0,10;0,00;0,00;2 200,00;0,00;0,00;298,75;"),
            OptimulaPamicaGenerator.ParseSpec(409, "409;OptTestHour TestCase409;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;150,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;7,75;0,00;0,00;0,00;;7,75;0,25;0,00;0,00;0,00;0,00;26,25;0,10;0,00;0,00;1 500,00;0,00;10 000,00;195,83;"),
            OptimulaPamicaGenerator.ParseSpec(411, "411;OptTestHour TestCase411;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;253,00;253,00;0,00;184,00;16,00;1,75;0,00;0,00;0,00;;1,75;0,25;0,00;0,00;0,00;0,00;114,75;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(414, "414;OptTestHour TestCase414;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;253,00;253,00;0,00;184,00;16,00;15,50;0,00;0,00;0,00;;15,50;0,25;0,00;0,00;0,00;0,00;123,00;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(415, "415;OptTestHour TestCase415;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;135,00;18,00;18,50;30,00;0,00;0,00;;18,50;0,25;0,00;0,00;0,00;0,00;18,25;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(419, "419;OptTestHour TestCase419;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;253,00;253,00;0,00;155,25;13,50;5,25;17,25;0,00;0,00;;5,25;0,25;0,00;0,00;0,00;0,00;98,75;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(423, "423;OptTestHour TestCase423;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;20,00;0,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;25,00;0,00;7,50;0,00;;25,00;0,25;0,00;0,00;0,00;0,00;20,50;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(424, "424;OptTestHour TestCase424;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;11,00;0,00;0,00;0,00;;11,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(428, "428;OptTestHour TestCase428;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;30,00;0,00;0,00;0,00;165,00;165,00;0,00;112,50;15,00;0,00;0,00;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(55, "55;OptTestHour TestCase55;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;0,00;21,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;18,00;16,00;0,00;0,00;;18,00;0,25;0,00;0,00;0,00;0,00;8,00;0,10;0,00;0,00;2 784,00;0,00;6 960,00;929,58;"),
            OptimulaPamicaGenerator.ParseSpec(57, "57;OptTestHour TestCase57;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;24,00;0,00;0,00;0,00;253,00;253,00;0,00;138,00;12,00;10,00;46,00;0,00;0,00;;10,00;0,25;0,00;0,00;0,00;0,00;88,00;0,10;0,00;0,00;4 300,00;0,00;7 124,00;922,08;"),
            OptimulaPamicaGenerator.ParseSpec(66, "66;OptTestHour TestCase66;202201;190,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;253,00;253,00;0,00;149,50;13,00;0,00;34,50;0,00;0,00;;0,00;0,25;0,00;0,00;0,00;0,00;68,00;0,10;0,00;0,00;4 600,00;0,00;30 000,00;887,08;"),
            OptimulaPamicaGenerator.ParseSpec(74, "74;OptTestHour TestCase74;202201;250,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;50,00;0,00;0,00;0,00;253,00;253,00;0,00;69,00;6,00;2,50;115,00;0,00;0,00;;2,50;0,25;0,00;0,00;0,00;0,00;46,50;0,10;0,00;0,00;3 900,00;0,00;16 600,00;732,50;"),
            OptimulaPamicaGenerator.ParseSpec(90, "90;OptTestHour TestCase90;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;19,00;0,00;0,00;0,00;176,00;176,00;0,00;96,00;12,00;5,50;80,00;0,00;0,00;;5,50;0,25;0,00;0,00;0,00;0,00;6,25;0,10;0,00;0,00;6 150,00;0,00;3 198,00;937,08;"),
            OptimulaPamicaGenerator.ParseSpec(95, "95;OptTestHour TestCase95;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;23,00;0,00;0,00;0,00;253,00;253,00;0,00;161,00;14,00;6,00;11,50;0,00;0,00;;6,00;0,25;0,00;0,00;0,00;0,00;102,00;0,10;0,00;0,00;2 950,00;0,00;4 290,00;570,83;"),
            OptimulaPamicaGenerator.ParseSpec(98, "98;OptTestHour TestCase98;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;0,00;19,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;9,25;0,00;0,00;0,00;;9,25;0,25;0,00;0,00;0,00;0,00;2,25;0,10;0,00;0,00;2 832,00;0,00;6 136,00;805,83;"),
        };

        protected static readonly OptimulaGenerator[] _genScmMonthTests = new OptimulaGenerator[] {
            OptimulaPamicaGenerator.ParseSpec(1, "101;OptTestMonth TestCase101;202201;105,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;8 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;96,00;12,00;40,00;80,00;0,00;0,00;;40,00;0,25;0,00;0,00;0,00;0,00;18,25;0,10;0,00;0,00;3 506,00;0,00;8 852,00;912,08;"),
            OptimulaPamicaGenerator.ParseSpec(106, "106;OptTestMonth TestCase106;202201;150,00;0,14;0,00;0,00;0,00;83,00;0,00;0,00;11 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;0,00;40,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 229,00;0,00;16 021,00;840,00;"),
            OptimulaPamicaGenerator.ParseSpec(114, "114;OptTestMonth TestCase114;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;5 100,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;128,00;16,00;0,00;48,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 880,00;0,00;11 238,00;800,00;"),
            OptimulaPamicaGenerator.ParseSpec(116, "116;OptTestMonth TestCase116;202201;0,00;0,00;0,00;0,00;0,00;100,00;0,00;0,00;6 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;128,00;16,00;0,00;40,00;8,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;5 550,00;0,00;0,00;741,67;"),
            OptimulaPamicaGenerator.ParseSpec(131, "131;OptTestMonth TestCase131;202201;200,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;5 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;24,75;40,00;0,00;0,00;;24,75;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;3 648,00;0,00;11 852,00;1 146,25;"),
            OptimulaPamicaGenerator.ParseSpec(134, "134;OptTestMonth TestCase134;202201;270,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;112,00;14,00;0,00;64,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;6,50;0,10;0,00;0,00;6 500,00;0,00;22 250,00;866,67;"),
            OptimulaPamicaGenerator.ParseSpec(140, "140;OptTestMonth TestCase140;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;7 500,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;2 304,00;0,00;14 319,00;646,25;"),
            OptimulaPamicaGenerator.ParseSpec(149, "149;OptTestMonth TestCase149;202201;105,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;4 200,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;1,75;24,00;0,00;0,00;;1,75;0,25;0,00;0,00;0,00;0,00;5,75;0,10;0,00;0,00;3 534,00;0,00;8 475,00;834,58;"),
            OptimulaPamicaGenerator.ParseSpec(164, "164;OptTestMonth TestCase164;202201;100,00;0,14;0,00;0,00;0,00;52,00;0,00;0,00;3 450,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;0,00;24,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 276,00;0,00;6 760,00;840,00;"),
            OptimulaPamicaGenerator.ParseSpec(170, "170;OptTestMonth TestCase170;202201;200,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;20 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;104,00;13,00;0,00;72,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 096,00;0,00;10 302,00;860,00;"),
            OptimulaPamicaGenerator.ParseSpec(176, "176;OptTestMonth TestCase176;202201;100,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;6 500,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;13,25;0,00;0,00;0,00;;13,25;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 976,00;0,00;12 754,00;906,67;"),
            OptimulaPamicaGenerator.ParseSpec(194, "194;OptTestMonth TestCase194;202201;0,00;0,00;0,00;0,00;0,00;100,00;0,00;0,00;3 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;160,00;20,00;0,00;16,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;6 500,00;0,00;0,00;773,33;"),
            OptimulaPamicaGenerator.ParseSpec(197, "197;OptTestMonth TestCase197;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;7 500,00;0,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;21,50;0,00;0,00;0,00;;21,50;0,25;0,00;0,00;0,00;0,00;14,25;0,10;0,00;0,00;6 200,00;0,00;8 800,00;924,17;"),
            OptimulaPamicaGenerator.ParseSpec(213, "213;OptTestMonth TestCase213;202201;120,00;0,14;0,00;0,00;0,00;52,00;0,00;0,00;3 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;0,00;24,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 172,00;0,00;5 270,00;813,33;"),
            OptimulaPamicaGenerator.ParseSpec(219, "219;OptTestMonth TestCase219;202201;170,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;3 600,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;119,00;40,00;0,00;0,00;;119,00;0,25;0,00;0,00;0,00;0,00;65,00;0,10;0,00;0,00;5 500,00;0,00;3 625,00;1 506,67;"),
            OptimulaPamicaGenerator.ParseSpec(220, "220;OptTestMonth TestCase220;202201;105,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;7 500,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;120,00;15,00;23,50;56,00;0,00;0,00;;23,50;0,25;0,00;0,00;0,00;0,00;5,50;0,10;0,00;0,00;3 192,00;0,00;12 742,00;989,17;"),
            OptimulaPamicaGenerator.ParseSpec(222, "222;OptTestMonth TestCase222;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;5 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;0,00;24,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;6,50;0,10;0,00;0,00;6 200,00;0,00;8 118,00;826,67;"),
            OptimulaPamicaGenerator.ParseSpec(226, "226;OptTestMonth TestCase226;202201;130,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;7 000,00;0,00;0,00;0,00;0,00;165,00;165,00;0,00;67,50;9,00;10,25;97,50;0,00;0,00;;10,25;0,25;0,00;0,00;0,00;0,00;1,50;0,10;0,00;0,00;5 400,00;0,00;8 707,00;786,25;"),
            OptimulaPamicaGenerator.ParseSpec(24, "24;OptTestMonth TestCase24;202201;110,00;0,14;0,00;0,00;0,00;52,00;0,00;0,00;8 750,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;0,00;40,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 380,00;0,00;19 120,00;880,00;"),
            OptimulaPamicaGenerator.ParseSpec(240, "240;OptTestMonth TestCase240;202201;100,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;6 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;132,00;16,50;0,00;44,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 952,00;0,00;14 790,00;820,00;"),
            OptimulaPamicaGenerator.ParseSpec(275, "275;OptTestMonth TestCase275;202201;105,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;6 500,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;96,00;12,00;4,75;72,00;8,00;0,00;;4,75;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 363,00;0,00;5 630,00;892,08;"),
            OptimulaPamicaGenerator.ParseSpec(294, "294;OptTestMonth TestCase294;202201;200,00;0,14;0,00;0,00;0,00;52,00;0,00;0,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;0,00;24,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 172,00;0,00;24 988,00;740,00;"),
            OptimulaPamicaGenerator.ParseSpec(296, "296;OptTestMonth TestCase296;202201;120,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;4 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;144,00;18,00;34,00;0,00;8,00;0,00;;34,00;0,25;0,00;0,00;0,00;0,00;21,75;0,10;0,00;0,00;3 192,00;0,00;7 146,00;812,08;"),
            OptimulaPamicaGenerator.ParseSpec(306, "306;OptTestMonth TestCase306;202201;91,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;5 750,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;14,50;0,00;0,00;0,00;;14,50;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(309, "309;OptTestMonth TestCase309;202201;105,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;6 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;5,75;24,00;0,00;0,00;;5,75;0,25;0,00;0,00;0,00;0,00;10,25;0,10;0,00;0,00;3 192,00;0,00;12 314,00;898,75;"),
            OptimulaPamicaGenerator.ParseSpec(331, "331;OptTestMonth TestCase331;202201;91,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;5 750,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;40,00;5,00;0,00;16,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;3 000,00;0,00;12 994,00;889,17;"),
            OptimulaPamicaGenerator.ParseSpec(336, "336;OptTestMonth TestCase336;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;112,00;14,00;0,00;64,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 544,00;0,00;21 980,00;706,67;"),
            OptimulaPamicaGenerator.ParseSpec(344, "344;OptTestMonth TestCase344;202201;120,00;0,14;0,00;0,00;0,00;57,00;0,00;0,00;6 750,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;96,00;12,00;23,00;80,00;0,00;0,00;;23,00;0,25;0,00;0,00;0,00;0,00;8,50;0,10;0,00;0,00;3 591,00;0,00;16 031,00;989,58;"),
            OptimulaPamicaGenerator.ParseSpec(348, "348;OptTestMonth TestCase348;202201;120,00;0,14;0,00;0,00;0,00;83,00;0,00;0,00;10 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;5 395,00;0,00;22 730,00;866,67;"),
            OptimulaPamicaGenerator.ParseSpec(349, "349;OptTestMonth TestCase349;202201;120,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;5 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;96,00;12,00;0,00;80,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;6 400,00;0,00;8 362,00;853,33;"),
            OptimulaPamicaGenerator.ParseSpec(351, "351;OptTestMonth TestCase351;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;8 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;0,00;24,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;3 120,00;0,00;20 130,00;866,67;"),
            OptimulaPamicaGenerator.ParseSpec(365, "365;OptTestMonth TestCase365;202201;350,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;12 500,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 152,00;0,00;30 000,00;866,67;"),
            OptimulaPamicaGenerator.ParseSpec(366, "366;OptTestMonth TestCase366;202201;320,00;0,14;0,00;0,00;0,00;48,00;110,00;40,00;12 500,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;112,00;14,00;0,00;56,00;8,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 400,00;8 100,00;293,33;"),
            OptimulaPamicaGenerator.ParseSpec(370, "370;OptTestMonth TestCase370;202201;150,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;6 625,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;136,00;17,00;7,75;40,00;0,00;0,00;;7,75;0,25;0,00;0,00;0,00;0,00;14,50;0,10;0,00;0,00;2 064,00;0,00;10 436,00;625,42;"),
            OptimulaPamicaGenerator.ParseSpec(375, "375;OptTestMonth TestCase375;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;4 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;120,00;15,00;0,00;56,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 016,00;0,00;6 591,00;560,00;"),
            OptimulaPamicaGenerator.ParseSpec(377, "377;OptTestMonth TestCase377;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;6 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;139,50;17,50;0,00;8,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;2,00;0,10;0,00;0,00;5 200,00;0,00;9 804,00;690,83;"),
            OptimulaPamicaGenerator.ParseSpec(387, "387;OptTestMonth TestCase387;202201;150,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;7 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;68,75;0,00;0,00;0,00;;68,75;0,25;0,00;0,00;0,00;0,00;45,75;0,10;0,00;0,00;3 000,00;0,00;5 626,00;591,25;"),
            OptimulaPamicaGenerator.ParseSpec(400, "400;OptTestMonth TestCase400;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;7 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;18,25;0,00;0,00;0,00;;18,25;0,25;0,00;0,00;0,00;0,00;10,75;0,10;0,00;0,00;1 056,00;0,00;5 944,00;321,25;"),
            OptimulaPamicaGenerator.ParseSpec(401, "401;OptTestMonth TestCase401;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;7 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(403, "403;OptTestMonth TestCase403;202201;105,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;6 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;21,50;0,00;0,00;0,00;;21,50;0,25;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;1 056,00;0,00;5 194,00;322,92;"),
            OptimulaPamicaGenerator.ParseSpec(408, "408;OptTestMonth TestCase408;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;6 750,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;0,00;0,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(410, "410;OptTestMonth TestCase410;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;7 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;168,00;21,00;28,00;0,00;8,00;0,00;;28,00;0,25;0,00;0,00;0,00;0,00;22,75;0,10;0,00;0,00;384,00;0,00;2 161,00;110,00;"),
            OptimulaPamicaGenerator.ParseSpec(413, "413;OptTestMonth TestCase413;202201;120,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;7 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;33,50;0,00;0,00;0,00;;33,50;0,25;0,00;0,00;0,00;0,00;25,00;0,10;0,00;0,00;288,00;0,00;1 621,00;88,33;"),
            OptimulaPamicaGenerator.ParseSpec(425, "425;OptTestMonth TestCase425;202201;150,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;8 750,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;176,00;22,00;28,00;0,00;0,00;0,00;;28,00;0,25;0,00;0,00;0,00;0,00;4,25;0,10;0,00;0,00;0,00;0,00;0,00;0,00;"),
            OptimulaPamicaGenerator.ParseSpec(49, "49;OptTestMonth TestCase49;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;8 250,00;0,00;0,00;0,00;0,00;165,00;165,00;0,00;165,00;22,00;115,25;0,00;0,00;0,00;;115,25;0,25;0,00;0,00;0,00;0,00;58,25;0,10;0,00;0,00;6 300,00;0,00;10 253,00;1 249,17;"),
            OptimulaPamicaGenerator.ParseSpec(65, "65;OptTestMonth TestCase65;202201;130,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;7 500,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;152,00;19,00;4,50;16,00;8,00;0,00;;4,50;0,25;0,00;0,00;0,00;0,00;11,50;0,10;0,00;0,00;2 448,00;0,00;15 231,00;703,33;"),
            OptimulaPamicaGenerator.ParseSpec(86, "86;OptTestMonth TestCase86;202201;220,00;0,14;0,00;0,00;0,00;52,00;110,00;40,00;15 000,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;104,00;13,00;0,00;72,00;0,00;0,00;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;2 236,00;8 705,00;18 734,00;573,33;"),
            OptimulaPamicaGenerator.ParseSpec(91, "91;OptTestMonth TestCase91;202201;120,00;0,14;0,00;0,00;0,00;83,00;0,00;0,00;5 250,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;48,00;6,00;9,25;128,00;0,00;0,00;;9,25;0,25;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 648,00;0,00;8 908,00;965,42;"),
        };

        public static IEnumerable<object[]> GetGenTestDecData(IEnumerable<OptimulaGenerator> tests, IPeriod testPeriod, Int32 testPeriodCode, Int32 prevPeriodCode)
        {
            System.Text.EncodingProvider ppp = System.Text.CodePagesEncodingProvider.Instance;
            Encoding.RegisterProvider(ppp);

            return tests.Select((tt) => (new object[] { tt }));
        }

        public ServiceTestPamicaExampleTemplate(ITestOutputHelper output)
        {
            this.output = output;

            this._sut = new ServiceOptimulaPamicaEps();
            this._leg = new ServiceLegalios();
        }
        public static IPeriod PrevYear(IPeriod period)
        {
            return new Period(Math.Max(2010, period.Year - 1), period.Month);
        }
        public static IBundleProps CurrYearBundle(IServiceLegalios legSvc, IPeriod period)
        {
            var legResult = legSvc.GetBundle(period);
            return legResult.Value;
        }
        public static IBundleProps PrevYearBundle(IServiceLegalios legSvc, IPeriod period)
        {
            var legResult = legSvc.GetBundle(PrevYear(period));
            return legResult.Value;
        }
        protected static StreamWriter CreateProtokolFile(string fileName)
        {
            string filePath = Path.GetFullPath(Path.Combine(TestFolder, fileName));

            string currPath = Path.GetFullPath(".");
            int nameCount = currPath.Split(Path.DirectorySeparatorChar).Length;

            while (!currPath.EndsWith(PARENT_PROTOKOL_FOLDER_NAME) && nameCount != 1)
            {
                currPath = Path.GetDirectoryName(currPath);
            }
            string basePath = Path.Combine(currPath, PROTOKOL_FOLDER_NAME);
            if (nameCount <= 1)
            {
                basePath = Path.Combine(Path.GetFullPath("."), PROTOKOL_FOLDER_NAME);
            }
            if (!Directory.Exists(basePath))
            {
                Directory.CreateDirectory(basePath);
            }
            filePath = Path.Combine(basePath, fileName);
            FileStream fileStream = new FileInfo(filePath).Create();
            return new StreamWriter(fileStream, System.Text.Encoding.GetEncoding("windows-1250"));
        }
        protected static StreamWriter OpenProtokolFile(string fileName)
        {
            string filePath = Path.GetFullPath(Path.Combine(TestFolder, fileName));

            string currPath = Path.GetFullPath(".");
            int nameCount = currPath.Split(Path.DirectorySeparatorChar).Length;

            while (!currPath.EndsWith(PARENT_PROTOKOL_FOLDER_NAME) && nameCount != 1)
            {
                currPath = Path.GetDirectoryName(currPath);
            }
            string basePath = Path.Combine(currPath, PROTOKOL_FOLDER_NAME);
            if (nameCount <= 1)
            {
                basePath = Path.Combine(Path.GetFullPath("."), PROTOKOL_FOLDER_NAME);
            }
            if (!Directory.Exists(basePath))
            {
                Directory.CreateDirectory(basePath);
            }
            filePath = Path.Combine(basePath, fileName);
            FileStream fileStream = new FileInfo(filePath).Open(FileMode.Append, FileAccess.Write);
            return new StreamWriter(fileStream, System.Text.Encoding.GetEncoding("windows-1250"));
        }
        protected static void ExportPropsXlsStart(StreamWriter protokol)
        {
            string[] headerList = new string[]
            {
                "EmployeeNumb", // A
                "EmployeeName", // B
                "PeriodName",   // C
                "AgrWorkTarif", // D
                "AgrWorkRatio", // E
                "AgrHourLimit", // F
                "AgrWorkLimit", // G
                "ClothesHours", // H
                "ClothesDaily", // I
                "HomeOffTarif", // J
                "HomeOffHours", // K
                "MSalaryAward", // L
                "HsalaryAward", // M
                "FPremiumBase", // N
                "FPremiumBoss", // O  
                "FPremiumPers", // P  
                "FullSheetHrs", // Q  
                "TimeSheetHrs", // R  
                "HoliSheetHrs", // S  
                "WorkSheetHrs", // T 
                "WorkSheetDay", // U
                "OverSheetHrs", // V
                "VacaRecomHrs", // W  
                "PaidRecomHrs", // X
                "HoliRecomHrs", // Y
                "", // Z
                "OverAllowHrs", // AA
                "OverAllowRio", // AB
                "RestAllowHrs", // AC
                "RestAllowRio", // AD
                "WendAllowHrs", // AE
                "WendAllowRio", // AF
                "NighAllowHrs", // AG
                "NighAllowRio", // AH
                "HoliAllowHrs", // AI
                "HoliAllowRio", // AJ
                "QClothesBase", // AK
                "QHOfficeBase", // AL
                "QAgrWorkBase", // AM
                "QSumWorkHour", // AN
            };                     
            protokol.WriteLine(string.Join('\t', headerList));
        }
        protected static void ExportPropsCsvStart(StreamWriter protokol)
        {
            string[] headerList = new string[]
            {
                "EmployeeNumb", // A
                "EmployeeName", // B
                "PeriodName",   // C
                "AgrWorkTarif", // D
                "AgrWorkRatio", // E
                "AgrHourLimit", // F
                "AgrWorkLimit", // G
                "ClothesHours", // H
                "ClothesDaily", // I
                "HomeOffTarif", // J
                "HomeOffHours", // K
                "MSalaryAward", // L
                "HsalaryAward", // M
                "FPremiumBase", // N
                "FPremiumBoss", // O 
                "FPremiumPers", // P  
                "FullSheetHrs", // Q  
                "TimeSheetHrs", // R  
                "HoliSheetHrs", // S  
                "WorkSheetHrs", // T  
                "WorkSheetDay", // U
                "OverSheetHrs", // V
                "VacaRecomHrs", // W 
                "PaidRecomHrs", // X 
                "HoliRecomHrs", // Y
                "", // Z
                "OverAllowHrs", // AA
                "OverAllowRio", // AB
                "RestAllowHrs", // AC
                "RestAllowRio", // AD
                "WendAllowHrs", // AE
                "WendAllowRio", // AF
                "NighAllowHrs", // AG
                "NighAllowRio", // AH
                "HoliAllowHrs", // AI
                "HoliAllowRio", // AJ
                "QClothesBase", // AK
                "QHOfficeBase", // AL
                "QAgrWorkBase", // AM
                "QSumWorkHour", // AN
            };                     
            protokol.WriteLine(string.Join(';', headerList)+";");
        }
        protected static void ExportPropsEnd(StreamWriter protokol)
        {
        }
        protected void ServiceExamplesCreateImport(IEnumerable<OptimulaGenerator> tests, IPeriod testPeriod, Int32 testPeriodCode, Int32 prevPeriodCode)
        {
            System.Text.EncodingProvider ppp = System.Text.CodePagesEncodingProvider.Instance;
            Encoding.RegisterProvider(ppp);

            try
            {
                testPeriod.Code.Should().Be(testPeriodCode);

                var prevPeriod = PrevYear(testPeriod);
                prevPeriod.Code.Should().Be(prevPeriodCode);

                var testLegalResult = _leg.GetBundle(testPeriod);
                testLegalResult.IsSuccess.Should().Be(true);

                var testRuleset = testLegalResult.Value;

                var prevLegalResult = _leg.GetBundle(prevPeriod);
                prevLegalResult.IsSuccess.Should().Be(true);

                var prevRuleset = prevLegalResult.Value;

                using (var testProtokol = CreateProtokolFile($"OptimulaImport_{testPeriod.Year}.xls"))
                {
                    ExportPropsXlsStart(testProtokol);

                    foreach (var example in tests)
                    {
                        foreach (var impLine in example.BuildImportXlsString(testPeriod, testRuleset, prevRuleset))
                        {
                            testProtokol.WriteLine(impLine);
                        }
                    }
                    ExportPropsEnd(testProtokol);
                }
                using (var testProtokol = CreateProtokolFile($"OptimulaImport_{testPeriod.Year}.csv"))
                {
                    ExportPropsCsvStart(testProtokol);

                    foreach (var example in tests)
                    {
                        foreach (var impLine in example.BuildImportCsvString(testPeriod, testRuleset, prevRuleset))
                        {
                            testProtokol.WriteLine(impLine);
                        }
                    }
                    ExportPropsEnd(testProtokol);
                }
            }
            catch (Xunit.Sdk.XunitException e)
            {
                throw e;
            }
        }
        protected string GetExampleOptResultsLine(OptimulaGenerator example, IPeriod period, IEnumerable<ResultMonad.Result<ITermResult, HraveMzdy.Procezor.Service.Errors.ITermResultError>> results)
        {
            decimal IMP_WORKSHEETHRS = GetDecResultSelect<TimeactualWorkResult>(results,
                OptimulaArticleConst.ARTICLE_TIMEACTUAL_WORK, (x) => (x.WorkSheetHrsVal)); //IMP-WorkSheetHrs
            decimal IMP_WORKSHEETDAY = GetDecResultSelect<TimeactualWorkResult>(results,
                OptimulaArticleConst.ARTICLE_TIMEACTUAL_WORK, (x) => (x.WorkSheetDayVal)); //IMP-WorkSheetDay
            decimal IMP_WOTKABSENHRS = 0; //IMP-WotkAbsenHrs
            decimal IMP_WOTKABSENDAY = 0; //IMP-WotkAbsenDay
            decimal IMP_OVERSHEETHRS = GetDecResultSelect<TimeactualWorkResult>(results,
                OptimulaArticleConst.ARTICLE_TIMEACTUAL_WORK, (x) => (x.OverSheetHrsVal)); //IMP-OverSheetHrs
            decimal RES_AGRWORKPAYMT = GetDecResultSelect<AgrworkHoursResult>(results,
                OptimulaArticleConst.ARTICLE_AGRWORK_TARGETS, (x) => (x.ResultValue)); //RES-AgrWorkPaymt
            decimal RES_AGRWORKHOURS = GetDecResultSelect<AgrworkHoursResult>(results,
                OptimulaArticleConst.ARTICLE_AGRWORK_TARGETS, (x) => (x.AgrResultsHours)); //RES-AgrWorkHours
            decimal RES_CLOTDAYPAYMT = GetDecResultSelect<AllowceDailyResult>(results,
                OptimulaArticleConst.ARTICLE_ALLOWCE_CLOTDAY, (x) => (x.ResultValue)); //RES-ClotDayPaymt
            decimal RES_CLOTHRSPAYMT = GetDecResultSelect<AllowceHoursResult>(results,
                OptimulaArticleConst.ARTICLE_ALLOWCE_CLOTHRS, (x) => (x.ResultValue)); //RES-ClotHrsPaymt
            decimal RES_HOMEOFFPAYMT = GetDecResultSelect<AllowceHfullResult>(results,
                OptimulaArticleConst.ARTICLE_ALLOWCE_HOFFICE, (x) => (x.ResultValue)); //RES-HomeOffPaymt
            decimal IMP_MSALARYBONUS = GetDecResultSelect<OptimusBasisResult>(results,
                OptimulaArticleConst.ARTICLE_MAWARDS_TARGETS, (x) => (x.OptimusBasisVal)); //IMP-MSalaryBonus
            decimal RES_MSALARYBONUS = GetDecResultSelect<ReducedBasisResult>(results,
                OptimulaArticleConst.ARTICLE_MAWARDS_RESULTS, (x) => (x.ResultValue)); //RES-MSalaryBonus
            decimal IMP_HSALARYBONUS = GetDecResultSelect<OptimusHoursResult>(results,
                OptimulaArticleConst.ARTICLE_HAWARDS_TARGETS, (x) => (x.OptimusBasisVal)); //IMP-HsalaryBonus
            decimal RES_HSALARYBONUS = GetDecResultSelect<ReducedHoursResult>(results,
                OptimulaArticleConst.ARTICLE_HAWARDS_RESULTS, (x) => (x.ResultValue)); //RES-HsalaryBonus
            decimal IMP_FPREMIUMBASE = GetDecResultSelect<OptimusFixedResult>(results,
                OptimulaArticleConst.ARTICLE_PREMIUM_TARGETS, (x) => (x.OptimusBasisVal)); //IMP-FPremiumBase
            decimal RES_FPREMIUMBASE = GetDecResultSelect<ReducedFixedResult>(results,
                OptimulaArticleConst.ARTICLE_PREMIUM_RESULTS, (x) => (x.ResultValue)); //RES-FPremiumBase
            decimal IMP_FPREMIUMBOSS = GetDecResultSelect<OptimusFixedResult>(results,
                OptimulaArticleConst.ARTICLE_PREMADV_TARGETS, (x) => (x.OptimusBasisVal)); //IMP-FPremiumBoss
            decimal RES_FPREMIUMBOSS = GetDecResultSelect<ReducedFixedResult>(results,
                OptimulaArticleConst.ARTICLE_PREMADV_RESULTS, (x) => (x.ResultValue)); //RES-FPremiumBoss
            decimal IMP_FPREMIUMPERS = GetDecResultSelect<OptimusFixedResult>(results,
                OptimulaArticleConst.ARTICLE_PREMEXT_TARGETS, (x) => (x.OptimusBasisVal)); //IMP-FPremiumPers
            decimal RES_FPREMIUMPERS = GetDecResultSelect<ReducedFixedResult>(results,
                OptimulaArticleConst.ARTICLE_PREMEXT_RESULTS, (x) => (x.ResultValue)); //RES-FPremiumPers
            decimal IMP_QAVERAGEBASE = 0; //IMP-QAverageBase
            decimal IMP_AVERPREMSPAY = 0; //IMP-AverPremsPay
            decimal IMP_AVERVACASPAY = 0; //IMP-AverVacasPay
            decimal IMP_AVEROVERSPAY = 0; //IMP-AverOversPay

            string[] resultLine = new string[]
            {
                example.Number,              //EmployeeNumb
                example.Name,                //EmployeeName
                period.Code.ToString(),
                DecFormatDouble(IMP_WORKSHEETHRS), //IMP-WorkSheetHrs
                DecFormatDouble(IMP_WORKSHEETDAY), //IMP-WorkSheetDay
                DecFormatDouble(IMP_WOTKABSENHRS), //IMP-WotkAbsenHrs
                DecFormatDouble(IMP_WOTKABSENDAY), //IMP-WotkAbsenDay
                DecFormatDouble(IMP_OVERSHEETHRS), //IMP-OverSheetHrs
                DecFormatDouble(RES_AGRWORKPAYMT), //RES-AgrWorkPaymt
                DecFormatDouble(RES_AGRWORKHOURS), //RES-AgrWorkHours
                DecFormatDouble(RES_CLOTDAYPAYMT + RES_CLOTHRSPAYMT), //RES-ClotDayPaymt, RES-ClotHrsPaymt
                DecFormatDouble(RES_HOMEOFFPAYMT), //RES-HomeOffPaymt
                DecFormatDouble(IMP_MSALARYBONUS), //IMP-MSalaryBonus
                DecFormatDouble(RES_MSALARYBONUS), //RES-MSalaryBonus
                DecFormatDouble(IMP_HSALARYBONUS), //IMP-HsalaryBonus
                DecFormatDouble(RES_HSALARYBONUS), //RES-HsalaryBonus
                DecFormatDouble(IMP_FPREMIUMBASE), //IMP-FPremiumBase
                DecFormatDouble(RES_FPREMIUMBASE), //RES-FPremiumBase
                DecFormatDouble(IMP_FPREMIUMBOSS), //IMP-FPremiumBoss
                DecFormatDouble(RES_FPREMIUMBOSS), //RES-FPremiumBoss
                DecFormatDouble(IMP_FPREMIUMPERS), //IMP-FPremiumPers
                DecFormatDouble(RES_FPREMIUMPERS), //RES-FPremiumPers
                DecFormatDouble(IMP_QAVERAGEBASE), //IMP-QAverageBase
                DecFormatDouble(IMP_AVERPREMSPAY), //IMP-AverPremsPay
                DecFormatDouble(IMP_AVERVACASPAY), //IMP-AverVacasPay
                DecFormatDouble(IMP_AVEROVERSPAY), //IMP-AverOversPay
            };

            return string.Join(";", resultLine) + ";";
        }

        public static string DecFormatDouble(decimal decValue)
        {
            //string resultText = string.Format("{0:N2}", decValue);
            string resultText = decValue.ToString("0.00");
            return resultText;
        }
        protected decimal GetDecResultSelect<T>(IEnumerable<ResultMonad.Result<ITermResult, HraveMzdy.Procezor.Service.Errors.ITermResultError>> res, OptimulaArticleConst artCode, Func<T, decimal> selVal)
            where T : class, ITermResult
        {
            decimal resultInit = default;
            var result = res.Where((e) => (e.IsSuccess && e.Value.Article.Value == (Int32)artCode)).Select((x) => (x.Value)).ToList();
            var resultValue = result.Select((c) => (c as T))
                .Aggregate(resultInit, (agr, x) => (agr + selVal(x)));
            return resultValue;
        }

        protected void ServiceExampleTest(OptimulaGenerator example, IPeriod testPeriod, Int32 testPeriodCode, Int32 prevPeriodCode)
        {
            output.WriteLine($"Test: {example.Name}, Number: {example.Number}");
            try
            {
                testPeriod.Code.Should().Be(testPeriodCode);

                var prevPeriod = PrevYear(testPeriod);
                prevPeriod.Code.Should().Be(prevPeriodCode);

                var testLegalResult = _leg.GetBundle(testPeriod);
                testLegalResult.IsSuccess.Should().Be(true);

                var testRuleset = testLegalResult.Value;

                var prevLegalResult = _leg.GetBundle(prevPeriod);
                prevLegalResult.IsSuccess.Should().Be(true);

                var prevRuleset = prevLegalResult.Value;

                var targets = example.BuildSpecTargets(testPeriod, testRuleset, prevRuleset);
                foreach (var (target, index) in targets.Select((item, index) => (item, index)))
                {
                    var targetValue = target as OptimulaTermTarget;
                    var articleSymbol = target.ArticleDescr();
                    var conceptSymbol = target.ConceptDescr();
                    output.WriteLine("Index: {0}; ART: {1}; CON: {2}; con: {3}; pos: {4}; var: {5}; Target: {6}", index, articleSymbol, conceptSymbol, target.Contract.Value, target.Position.Value, target.Variant.Value, targetValue.TargetMessage());
                }

                var initService = _sut.InitWithPeriod(testPeriod);
                initService.Should().BeTrue();

                var restService = _sut.GetResults(testPeriod, testRuleset, targets);
                restService.Count().Should().NotBe(0);

                output.WriteLine($"Result Test: {example.Name}, Number: {example.Number}");

                foreach (var (result, index) in restService.Select((item, index) => (item, index)))
                {
                    if (result.IsSuccess)
                    {
                        var resultValue = result.Value as OptimulaTermResult;
                        var articleSymbol = resultValue.ArticleDescr();
                        var conceptSymbol = resultValue.ConceptDescr();
                        output.WriteLine("Index: {0}; ART: {1}; CON: {2}; Result: {3}", index, articleSymbol, conceptSymbol, resultValue.ResultMessage());
                    }
                    else if (result.IsFailure)
                    {
                        var errorValue = result.Error;
                        var articleSymbol = errorValue.ArticleDescr();
                        var conceptSymbol = errorValue.ConceptDescr();
                        output.WriteLine("Index: {0}; ART: {1}; CON: {2}; Error: {3}", index, articleSymbol, conceptSymbol, errorValue.Description());
                    }
                }
            }
            catch (Xunit.Sdk.XunitException e)
            {
                throw e;
            }
        }
        protected void ServiceTemplateExampleTest(OptimulaGenerator example, IPeriod testPeriod, Int32 testPeriodCode, Int32 prevPeriodCode)
        {
            if (example.Id == 1)
            {
                string[] strHeaderRadkaPRAC = new string[] {
                    "EmployeeNumb",
                    "EmployeeName",
                    "PeriodName",
                    "IMP-WorkSheetHrs",
                    "IMP-WorkSheetDay",
                    "IMP-WotkAbsenHrs",
                    "IMP-WotkAbsenDay",
                    "IMP-OverSheetHrs",
                    "RES-AgrWorkPaymt",
                    "RES-AgrWorkHours",
                    "RES-ClothesPaymt",
                    "RES-HomeOffPaymt",
                    "IMP-MSalaryAward",
                    "RES-MSalaryAward",
                    "IMP-HSalaryAward",
                    "RES-HSalaryAward",
                    "IMP-FPremiumBase",
                    "RES-FPremiumBase",
                    "IMP-FPremiumBoss",
                    "RES-FPremiumBoss",
                    "IMP-FPremiumPers",
                    "RES-FPremiumPers",
                    "IMP-QAverageBase",
                    "IMP-AverPremsPay",
                    "IMP-AverVacasPay",
                    "IMP-AverOversPay",
                };
                using (var testProtokol = CreateProtokolFile($"OPTIMIT_PAMICA_TEST_{testPeriod.Year}_{testPeriod.Code}.CSV"))
                {
                    testProtokol.WriteLine(string.Join(";", strHeaderRadkaPRAC) + ";");
                }
            }
            output.WriteLine($"Test: {example.Name}, Number: {example.Number}");

            try
            {
                testPeriod.Code.Should().Be(testPeriodCode);

                var prevPeriod = PrevYear(testPeriod);
                prevPeriod.Code.Should().Be(prevPeriodCode);

                var testLegalResult = _leg.GetBundle(testPeriod);
                testLegalResult.IsSuccess.Should().Be(true);

                var testRuleset = testLegalResult.Value;

                var prevLegalResult = _leg.GetBundle(prevPeriod);
                prevLegalResult.IsSuccess.Should().Be(true);

                var prevRuleset = prevLegalResult.Value;

                var targets = example.BuildSpecTargets(testPeriod, testRuleset, prevRuleset);

                foreach (var (target, index) in targets.Select((item, index) => (item, index)))
                {
                    var articleSymbol = target.ArticleDescr();
                    var conceptSymbol = target.ConceptDescr();
                    output.WriteLine("Index: {0}; ART: {1}; CON: {2}; con: {3}; pos: {4}; var: {5}", index, articleSymbol, conceptSymbol, target.Contract.Value, target.Position.Value, target.Variant.Value);
                }

                var initService = _sut.InitWithPeriod(testPeriod);
                initService.Should().BeTrue();

                var restService = _sut.GetResults(testPeriod, testRuleset, targets);
                restService.Count().Should().NotBe(0);

                using (var testProtokol = OpenProtokolFile($"OPTIMIT_PAMICA_TEST_{testPeriod.Year}_{testPeriod.Code}.CSV"))
                {
                    var testResults = GetExampleOptResultsLine(example, testPeriod, restService);
                    testProtokol.WriteLine(testResults);
                }

                output.WriteLine($"Result Test: {example.Name}, Number: {example.Number}");

                foreach (var (result, index) in restService.Select((item, index) => (item, index)))
                {
                    if (result.IsSuccess)
                    {
                        var resultValue = result.Value as OptimulaTermResult;
                        var articleSymbol = resultValue.ArticleDescr();
                        var conceptSymbol = resultValue.ConceptDescr();
                        output.WriteLine("Index: {0}; ART: {1}; CON: {2}; Result: {3}", index, articleSymbol, conceptSymbol, resultValue.ResultMessage());
                    }
                    else if (result.IsFailure)
                    {
                        var errorValue = result.Error;
                        var articleSymbol = errorValue.ArticleDescr();
                        var conceptSymbol = errorValue.ConceptDescr();
                        output.WriteLine("Index: {0}; ART: {1}; CON: {2}; Error: {3}", index, articleSymbol, conceptSymbol, errorValue.Description());
                    }
                }
            }
            catch (Xunit.Sdk.XunitException e)
            {
                throw e;
            }
        }

        public OptimulaGenerator Example_1_OPTOptTestMonthTestCase101()
        {
            return OptimulaPamicaGenerator.ParseSpec(1, "101;OptTestMonth TestCase101;202201;91,00;0,14;0,00;0,00;0,00;48,00;0,00;0,00;5 750,00;0,00;0,00;0,00;0,00;176,00;176,00;0,00;40,00;5,00;0,00;16,00;0,00;0,00;;;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,10;0,00;0,00;3 000,00;0,00;12 994,00;889,17;");
        }
        public OptimulaGenerator Example_1_OPTOptTestHourTestCase111()
        {
            return OptimulaPamicaGenerator.ParseSpec(1, "111;OptTestHour TestCase111;202201;170,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;35,00;0,00;0,00;0,00;253,00;253,00;0,00;57,50;5,00;1,50;115,00;0,00;0,00;;1,50;0,25;0,00;0,00;0,00;0,00;46,50;0,10;0,00;0,00;2 800,00;0,00;7 945,00;553,33;");
        }
        public OptimulaGenerator Example_1_OPTOptTestHourTestCase161()
        {
            return OptimulaPamicaGenerator.ParseSpec(1, "161;OptTestHour TestCase161;202201;130,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;70,00;0,00;0,00;0,00;165,00;165,00;0,00;146,25;19,50;16,50;18,75;0,00;0,00;;16,50;0,25;0,00;0,00;0,00;0,00;11,75;0,10;0,00;0,00;5 950,00;0,00;25 288,00;779,58;");
        }
        public OptimulaGenerator Example_1_OPTOptTestHourTestCase276()
        {
            return OptimulaPamicaGenerator.ParseSpec(276, "276;OptTestHour TestCase276;202201;110,00;0,14;0,00;0,00;0,00;100,00;0,00;0,00;0,00;29,00;0,00;0,00;0,00;165,00;165,00;0,00;82,50;11,00;9,75;67,50;0,00;0,00;;9,75;0,25;0,00;0,00;0,00;0,00;6,00;0,10;0,00;0,00;5 050,00;0,00;5 934,00;703,75;");
        }
        public OptimulaGenerator Example_1_OPTOptTestEpsTestCase126()
        {
            return OptimulaPamicaGenerator.ParseSpec(126, "126;OptEps TestCase126;202104;120,00;0,30;0,00;0,00;11,17;0,00;0,00;0,00;0,00;50,00;1 000,00;0,00;0,00;165,00;165,00;0,00;157,50;21,00;0,00;0,00;0,00;7,50;;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;0,00;4 399,00;0,00;14 220,00;681,67;");
        }
        public OptimulaGenerator Example_102_FullTime_MinimumWage()
        {
            return OptimulaPamicaGenerator.Spec(102, "FullTime_FullTime_MinimumWage", "102")
                .WithFullSheetHrsVal(157 * 60 + 30)
                .WithTimeSheetHrsVal(157 * 60 + 30)
                .WithWorkSheetHrsVal(142 * 60 + 30)
                .WithWorkSheetDayVal(19 * 100)
                .WithOverSheetHrsVal(0 * 60)
                .WithHoliSheetHrsVal(0 * 60)
                .WithMSalaryAwardVal(2993 * 100)
                .WithFPremiumBaseVal(0 * 100)
                .WithClothesDailyVal(106 * 100)
                .WithAgrWorkRatioVal(0 * 100 + 14)
                .WithAgrWorkTarifVal(91 * 100);
        }
        public OptimulaGenerator Example_101_FullTime_OverTimeZeroHolidaysZero()
        {
            return OptimulaPamicaGenerator.Spec(101, "FullTime_OverTimeZeroHolidaysZero", "101")
                .WithFullSheetHrsVal(168 * 60)
                .WithTimeSheetHrsVal(168 * 60)
                .WithWorkSheetHrsVal(168 * 60)
                .WithWorkSheetDayVal(19 * 100)
                .WithOverSheetHrsVal(0 * 60)
                .WithHoliSheetHrsVal(0 * 60)
                .WithMSalaryAwardVal(2700 * 100)
                .WithFPremiumBaseVal(2000 * 100)
                .WithHomeOffTarifVal(110 * 100)
                .WithHomeOffHoursVal(40 * 60)
                .WithClothesDailyVal(106 * 100) // 106 Kč
                .WithAgrWorkRatioVal(0 * 100 + 14) // procent 0,14
                .WithAgrWorkTarifVal(100 * 100);
        }
        public OptimulaGenerator Example_111_WorkTime_OverTimeZeroHolidaysZero()
        {
            return OptimulaPamicaGenerator.Spec(111, "WorkTime_OverTimeZeroHolidaysZero", "111")
                .WithFullSheetHrsVal(168 * 60)
                .WithTimeSheetHrsVal(168 * 60)
                .WithWorkSheetHrsVal(160 * 60)
                .WithOverSheetHrsVal(0)
                .WithHoliSheetHrsVal(0)
                .WithMSalaryAwardVal(5700 * 100)
                .WithHomeOffTarifVal(110 * 100)
                .WithHomeOffHoursVal(40 * 60)
                .WithClothesHoursVal(106 * 100)
                .WithAgrWorkRatioVal(0*100 + 14)
                .WithAgrWorkTarifVal(100 * 100);
        }
    }
}
